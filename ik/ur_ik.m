function [q] = ur_ik(alpha,a,d,theta,delta,T06)
    % ------------------------------------------------------------------
    % inverse kinematic for ur robot
    % if there is a+bi then the answer will be nan
    % alpha, a, d, theta, delta is 1x6, T06 is the result of kinematic
    % ------------------------------------------------------------------
    
    % 1) preparation
    addpath('E:/003_Robotics/机器人导论/rotation');
    addpath('E:/003_Robotics/机器人导论/fk');
    delta = deg2rad(delta);
    alpha = deg2rad(alpha);
    theta = deg2rad(theta);
    
    % align a and alpha
    a0 = a(1); a1 = a(2); a2_ = a(3); a3_ = a(4); a4 = a(5); a5 = a(6);
    alpha0 = alpha(1); alpha1 = alpha(2); alpha2_ = alpha(3);
    alpha3 = alpha(4); alpha4 = alpha(5); alpha5 = alpha(6);
    % align joint_value and d
    d1 = d(1); d2_ = d(2); d3_ = d(3);
    d4_ = d(4); d5_ = d(5); d6_ = d(6);
    
    joint_value = theta + delta;
    joint_value_1 = joint_value(1);
    joint_value_2 = joint_value(2);
    joint_value_3 = joint_value(3);
    joint_value_4 = joint_value(4);
    joint_value_5 = joint_value(5);
    joint_value_6 = joint_value(6);
    
    % pose and postion from T06
    nx = T06(1,1); ny = T06(2,1); nz = T06(3,1);
    ox = T06(1,2); oy = T06(2,2); oz = T06(3,2);
    ax = T06(1,3); ay = T06(2,3); az = T06(3,3);
    px = T06(1,4); py = T06(2,4); pz = T06(3,4);
    
    m = ay*d6_ - py;
    n = ax*d6_ - px;
    
    % ------------------------------------------------
    % 2) q1
    % ------------------------------------------------
    q1(1) = atan2(m, n) - atan2(-d4_, +sqrt(m^2 + n^2 - d4_^2));
    q1(2) = atan2(m, n) - atan2(-d4_, -sqrt(m^2 + n^2 - d4_^2));
    
    q1 = replaceComplexWithNaN(q1);
    
    c1(1) = cos(q1(1)); s1(1) = sin(q1(1));
    c1(2) = cos(q1(2)); s1(2) = sin(q1(2));
    
    % ------------------------------------------------
    % 3) q5
    % ------------------------------------------------
    q5(1) = acos(-ax*s1(1) + ay*c1(1));
    q5(2) = -acos(-ax*s1(1) + ay*c1(1));
    q5(3) = acos(-ax*s1(2) + ay*c1(2));
    q5(4) = -acos(-ax*s1(2) + ay*c1(2));
    
    q5 = replaceComplexWithNaN(q5);
    
    c5(1) = cos(q5(1)); s5(1) = sin(q5(1));
    c5(2) = cos(q5(2)); s5(2) = sin(q5(2));
    c5(3) = cos(q5(3)); s5(3) = sin(q5(3));
    c5(4) = cos(q5(4)); s5(4) = sin(q5(4));
    
    % q1(1)->q5(1)
    % q1(1)->q5(2)
    % q1(2)->q5(3)
    % q1(2)->q5(4)
    
    % ------------------------------------------------
    % 4) q6
    % ------------------------------------------------
    m1(1) = -s1(1)*nx + c1(1)*ny;
    n1(1) = -s1(1)*ox + c1(1)*oy;
    m1(2) = -s1(2)*nx + c1(2)*ny;
    n1(2) = -s1(2)*ox + c1(2)*oy;
    
    % 防止分母为 0
    q6(1) = atan2(-n1(1)/sin(q5(1)), m1(1)/sin(q5(1)));
    q6(2) = atan2(-n1(1)/sin(q5(2)), m1(1)/sin(q5(2)));
    q6(3) = atan2(-n1(2)/sin(q5(3)), m1(2)/sin(q5(3)));
    q6(4) = atan2(-n1(2)/sin(q5(4)), m1(2)/sin(q5(4)));
    
    q6 = replaceComplexWithNaN(q6);
    
    % q1(1)->q5(1)->q6(1)
    % q1(1)->q5(2)->q6(2)
    % q1(2)->q5(3)->q6(3)
    % q1(2)->q5(4)->q6(4)
    
    c6(1) = cos(q6(1)); s6(1) = sin(q6(1));
    c6(2) = cos(q6(2)); s6(2) = sin(q6(2));
    c6(3) = cos(q6(3)); s6(3) = sin(q6(3));
    c6(4) = cos(q6(4)); s6(4) = sin(q6(4));
    
    % ------------------------------------------------
    % 5) 定义正向矩阵 (不再显式计算 inv，而是用 \ 或 /)
    % ------------------------------------------------
    % T01_1
    T01_inv_1 = [
        c1(1),  s1(1), 0,   0;
       -s1(1),  c1(1), 0,   0;
           0,     0,   1, -d1;
           0,     0,   0,   1
    ];
    % T45_1
    T45_1 = [
        c5(1),  -s5(1),  0,   0;
           0,       0,  -1, -d5_;
        s5(1),   c5(1),  0,   0;
           0,       0,   0,   1
    ];
    % T56_1
    T56_inv_1 = [
        c6(1),    0,   -s6(1),   0;
       -s6(1),    0,   -c6(1),   0;
           0,     0,      0,  -d6_;
           0,     0,       0,    1
    ];
    
    % T45_2
    T45_2 = [
        c5(2),  -s5(2),  0,   0;
           0,       0,  -1, -d5_;
        s5(2),   c5(2),  0,   0;
           0,       0,   0,   1
    ];
    % T56_2
    T56_inv_2 = [
        c6(2),    0,   -s6(2),   0;
       -s6(2),    0,   -c6(2),   0;
           0,     0,      0,  -d6_;
           0,     0,       0,    1
    ];
    
    % T01_2
    T01_inv_2 = [
        c1(2),  s1(2), 0,   0;
       -s1(2),  c1(2), 0,   0;
           0,     0,   1, -d1;
           0,     0,   0,   1
    ];
    % T45_3
    T45_3 = [
        c5(3),  -s5(3),  0,   0;
           0,       0,  -1, -d5_;
        s5(3),   c5(3),  0,   0;
           0,       0,   0,   1
    ];
    % T56_3
    T56_inv_3 = [
        c6(3),    0,   -s6(3),   0;
       -s6(3),    0,   -c6(3),   0;
           0,     0,      0,  -d6_;
           0,     0,       0,    1
    ];
    
    % T45_4
    T45_4 = [
        c5(4),  -s5(4),  0,   0;
           0,       0,  -1, -d5_;
        s5(4),   c5(4),  0,   0;
           0,       0,   0,   1
    ];
    % T56_4
    T56_inv_4 = [
        c6(4),    0,   -s6(4),   0;
       -s6(4),    0,   -c6(4),   0;
           0,     0,      0,  -d6_;
           0,     0,       0,    1
    ];
    
    % ------------------------------------------------
    % 6) 计算 T14_cal_i (用 \ 或 / 代替 inv(...))
    %    T14_cal_1 = inv(T01_1)*T06*inv(T56_1)*inv(T45_1)
    %              = T01_1 \ T06 / T56_1 / T45_1
    % ------------------------------------------------
    T14_cal_1 = T01_inv_1*T06*T56_inv_1*inv(T45_1);
    T14_cal_2 = T01_inv_1*T06*T56_inv_2*inv(T45_2);
    
    T14_cal_3 = T01_inv_2*T06*T56_inv_3*inv(T45_3);
    T14_cal_4 = T01_inv_2*T06*T56_inv_4*inv(T45_4);
    
    % ------------------------------------------------
    % 7) 从 T14_cal_i 中提取 px_T14(i), pz_T14(i)
    % ------------------------------------------------
    px_T14(1) = T14_cal_1(1,4); pz_T14(1) = T14_cal_1(3,4);
    px_T14(2) = T14_cal_2(1,4); pz_T14(2) = T14_cal_2(3,4);
    px_T14(3) = T14_cal_3(1,4); pz_T14(3) = T14_cal_3(3,4);
    px_T14(4) = T14_cal_4(1,4); pz_T14(4) = T14_cal_4(3,4);
%     px_T14(1) = T14_verify(1,4); pz_T14(1) = T14_verify(3,4);
%     px_T14(2) = T14_verify(1,4); pz_T14(2) = T14_verify(3,4);
%     px_T14(3) = T14_verify(1,4); pz_T14(3) = T14_verify(3,4);
%     px_T14(4) = T14_verify(1,4); pz_T14(4) = T14_verify(3,4);
    % ------------------------------------------------
    % 8) 计算 c3(1..4)，并据此求 q3(1..8)
    % ------------------------------------------------
    c3(1) = (px_T14(1)^2 + pz_T14(1)^2 - a2_^2 - a3_^2)/(2*a2_*a3_);
    c3(2) = (px_T14(2)^2 + pz_T14(2)^2 - a2_^2 - a3_^2)/(2*a2_*a3_);
    c3(3) = (px_T14(3)^2 + pz_T14(3)^2 - a2_^2 - a3_^2)/(2*a2_*a3_);
    c3(4) = (px_T14(4)^2 + pz_T14(4)^2 - a2_^2 - a3_^2)/(2*a2_*a3_);
    
    c3 = replaceComplexWithNaN(c3);
    
    q3(1) = acos(c3(1)); q3(2) = -acos(c3(1));
    q3(3) = acos(c3(2)); q3(4) = -acos(c3(2));
    q3(5) = acos(c3(3)); q3(6) = -acos(c3(3));
    q3(7) = acos(c3(4)); q3(8) = -acos(c3(4));
    
    q3 = replaceComplexWithNaN(q3);
    
    for i = 1:8
        c3(i) = cos(q3(i));
        s3(i) = sin(q3(i));
    end
    c3 = replaceComplexWithNaN(c3);
    s3 = replaceComplexWithNaN(s3);
    
    % ------------------------------------------------
    % 9) 计算 q2(1..8)
    % ------------------------------------------------
    %q1(1)->q5(1)->q6(1)->T14(1)->q3(1)
    %q1(1)->q5(1)->q6(1)->T14(1)->q3(2)
    %q1(1)->q5(2)->q6(2)->T14(2)->q3(3)
    %q1(1)->q5(2)->q6(2)->T14(2)->q3(4)
    %q1(2)->q5(3)->q6(3)->T14(3)->q3(5)
    %q1(2)->q5(3)->q6(3)->T14(3)->q3(6)
    %q1(2)->q5(4)->q6(4)->T14(4)->q3(7)
    %q1(2)->q5(4)->q6(4)->T14(4)->q3(8)
    %--------------------------------------------------
    % q2(1)
    v2_1 = [px_T14(1);-pz_T14(1)];
    v2_2 = [px_T14(2);-pz_T14(2)];
    v2_3 = [px_T14(3);-pz_T14(3)];
    v2_4 = [px_T14(4);-pz_T14(4)];
    m2_1 = [
            a2_ + c3(1)*a3_ ,  -s3(1)*a3_;
               s3(1)*a3_,   c3(1)*a3_ + a2_;  
            ];
    m2_2 = [
            a2_ + c3(2)*a3_ ,  -s3(2)*a3_;
               s3(2)*a3_,   c3(2)*a3_ + a2_;  
            ];
    m2_3 = [
            a2_ + c3(3)*a3_ ,  -s3(3)*a3_;
               s3(3)*a3_,   c3(3)*a3_ + a2_;  
            ];
    m2_4 = [
            a2_ + c3(4)*a3_ ,  -s3(4)*a3_;
               s3(4)*a3_,   c3(4)*a3_ + a2_;  
            ];
    m2_5 = [
            a2_ + c3(5)*a3_ ,  -s3(5)*a3_;
               s3(5)*a3_,   c3(5)*a3_ + a2_;  
            ];
    m2_6 = [
            a2_ + c3(6)*a3_ ,  -s3(6)*a3_;
               s3(6)*a3_,   c3(6)*a3_ + a2_;  
            ];
    m2_7 = [
            a2_ + c3(7)*a3_ ,  -s3(7)*a3_;
               s3(7)*a3_,   c3(7)*a3_ + a2_;  
            ];
    m2_8 = [
            a2_ + c3(8)*a3_ ,  -s3(8)*a3_;
               s3(8)*a3_,   c3(8)*a3_ + a2_;  
            ];
    res_q2_1 = m2_1\v2_1;
    res_q2_2 = m2_2\v2_1;
    res_q2_3 = m2_3\v2_2;
    res_q2_4 = m2_4\v2_2;
    res_q2_5 = m2_5\v2_3;
    res_q2_6 = m2_6\v2_3;
    res_q2_7 = m2_7\v2_4;
    res_q2_8 = m2_8\v2_4;
    q2(1) = atan2(res_q2_1(2),res_q2_1(1));
    q2(2) = atan2(res_q2_2(2),res_q2_2(1));
    q2(3) = atan2(res_q2_3(2),res_q2_3(1));
    q2(4) = atan2(res_q2_4(2),res_q2_4(1));
    q2(5) = atan2(res_q2_5(2),res_q2_5(1));
    q2(6) = atan2(res_q2_6(2),res_q2_6(1));
    q2(7) = atan2(res_q2_7(2),res_q2_7(1));
    q2(8) = atan2(res_q2_8(2),res_q2_8(1));
    
    q2 = replaceComplexWithNaN(q2);
    
    for i = 1:8
        c2(i) = cos(q2(i));
        s2(i) = sin(q2(i));
    end
    c2 = replaceComplexWithNaN(c2);
    s2 = replaceComplexWithNaN(s2);
    
    % ------------------------------------------------
    % 10) 计算 q4(1..8)
    % ------------------------------------------------
    nx_T14(1) = T14_cal_1(1,1); nx_T14(2) = T14_cal_2(1,1);
    nx_T14(3) = T14_cal_3(1,1); nx_T14(4) = T14_cal_4(1,1);
    nz_T14(1) = T14_cal_1(3,1); nz_T14(2) = T14_cal_2(3,1);
    nz_T14(3) = T14_cal_3(3,1); nz_T14(4) = T14_cal_4(3,1);
    
%     nx_T14(1) = T14_verify(1,1); nx_T14(2) = T14_verify(1,1);
%     nx_T14(3) = T14_verify(1,1); nx_T14(4) = T14_verify(1,1);
%     nz_T14(1) = T14_verify(3,1); nz_T14(2) = T14_verify(3,1);
%     nz_T14(3) = T14_verify(3,1); nz_T14(4) = T14_verify(3,1);
    
    theta234(1) = atan2(-nz_T14(1), nx_T14(1));
    theta234(2) = atan2(-nz_T14(2), nx_T14(2));
    theta234(3) = atan2(-nz_T14(3), nx_T14(3));
    theta234(4) = atan2(-nz_T14(4), nx_T14(4));
    
    q4(1) = theta234(1) - q2(1) - q3(1);
    q4(2) = theta234(1) - q2(2) - q3(2);
    q4(3) = theta234(2) - q2(3) - q3(3);
    q4(4) = theta234(2) - q2(4) - q3(4);
    q4(5) = theta234(3) - q2(5) - q3(5);
    q4(6) = theta234(3) - q2(6) - q3(6);
    q4(7) = theta234(4) - q2(7) - q3(7);
    q4(8) = theta234(4) - q2(8) - q3(8);
    
    q4 = replaceComplexWithNaN(q4);
    
    % ------------------------------------------------
    % 11) 最终组合 8 组解
    % ------------------------------------------------
    q = [
         q1(1), q2(1), q3(1), q4(1), q5(1), q6(1);
         q1(1), q2(2), q3(2), q4(2), q5(1), q6(1);
         q1(1), q2(3), q3(3), q4(3), q5(2), q6(2);
         q1(1), q2(4), q3(4), q4(4), q5(2), q6(2);
         q1(2), q2(5), q3(5), q4(5), q5(3), q6(3);
         q1(2), q2(6), q3(6), q4(6), q5(3), q6(3);
         q1(2), q2(7), q3(7), q4(7), q5(4), q6(4);
         q1(2), q2(8), q3(8), q4(8), q5(4), q6(4);
       ];
   q = rad2deg(q);
    
end

% ------------------------------------------------------
% 小工具函数：把含有明显虚部的值替换为 NaN，并保留实部
% ------------------------------------------------------
function x = replaceComplexWithNaN(x)
    epsilon = 1e-9;
    idx = abs(imag(x)) > epsilon;
    x(idx) = NaN;
    x = real(x);
end
